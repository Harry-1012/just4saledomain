<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>👋HarryBlog</title>
  
  
  <link href="https://harrywork.com/blog/atom.xml" rel="self"/>
  
  <link href="https://harrywork.com/blog/"/>
  <updated>2025-04-19T02:24:44.190Z</updated>
  <id>https://harrywork.com/blog/</id>
  
  <author>
    <name>Harry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>comfyui通过Api请求报错,通过comfyui界面执行正常</title>
    <link href="https://harrywork.com/blog/p/2025comfyujinterfaceerror/"/>
    <id>https://harrywork.com/blog/p/2025comfyujinterfaceerror/</id>
    <published>2025-04-18T00:47:29.000Z</published>
    <updated>2025-04-19T02:24:44.190Z</updated>
    
    <content type="html"><![CDATA[<p>通过接口Api执行工作流报错如下,</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">got prompt</span><br><span class="line">[Impact Pack] ComfyUI-Impact-Pack: Error on prompt - several features will not work.</span><br><span class="line">&#x27;list&#x27; object has no attribute &#x27;items&#x27;</span><br><span class="line">[DEBUG] Inputs type: &lt;class &#x27;list&#x27;&gt;</span><br><span class="line">Exception in thread Thread-7 (prompt_worker):</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/root/miniconda3/lib/python3.10/threading.py&quot;, line 1016, in _bootstrap_inner</span><br><span class="line">    self.run()</span><br><span class="line">  File &quot;/root/miniconda3/lib/python3.10/threading.py&quot;, line 953, in run</span><br><span class="line">    self._target(*self._args, **self._kwargs)</span><br><span class="line">  File &quot;/root/ComfyUI/main.py&quot;, line 176, in prompt_worker</span><br><span class="line">    e.execute(item[2], prompt_id, item[3], item[4])</span><br><span class="line">  File &quot;/root/ComfyUI/execution.py&quot;, line 479, in execute</span><br><span class="line">    cache.set_prompt(dynamic_prompt, prompt.keys(), is_changed_cache)</span><br><span class="line">  File &quot;/root/ComfyUI/comfy_execution/caching.py&quot;, line 157, in set_prompt</span><br><span class="line">    self.cache_key_set = self.key_class(dynprompt, node_ids, is_changed_cache)</span><br><span class="line">  File &quot;/root/ComfyUI/comfy_execution/caching.py&quot;, line 80, in __init__</span><br><span class="line">    self.add_keys(node_ids)</span><br><span class="line">  File &quot;/root/ComfyUI/comfy_execution/caching.py&quot;, line 92, in add_keys</span><br><span class="line">    self.keys[node_id] = self.get_node_signature(self.dynprompt, node_id)</span><br><span class="line">  File &quot;/root/ComfyUI/comfy_execution/caching.py&quot;, line 97, in get_node_signature</span><br><span class="line">    ancestors, order_mapping = self.get_ordered_ancestry(dynprompt, node_id)</span><br><span class="line">  File &quot;/root/ComfyUI/comfy_execution/caching.py&quot;, line 128, in get_ordered_ancestry</span><br><span class="line">    self.get_ordered_ancestry_internal(dynprompt, node_id, ancestors, order_mapping)</span><br><span class="line">  File &quot;/root/ComfyUI/comfy_execution/caching.py&quot;, line 144, in get_ordered_ancestry_internal</span><br><span class="line">    self.get_ordered_ancestry_internal(dynprompt, ancestor_id, ancestors, order_mapping)</span><br><span class="line">  File &quot;/root/ComfyUI/comfy_execution/caching.py&quot;, line 144, in get_ordered_ancestry_internal</span><br><span class="line">    self.get_ordered_ancestry_internal(dynprompt, ancestor_id, ancestors, order_mapping)</span><br><span class="line">  File &quot;/root/ComfyUI/comfy_execution/caching.py&quot;, line 137, in get_ordered_ancestry_internal</span><br><span class="line">    input_keys = sorted(inputs.keys())</span><br><span class="line">AttributeError: &#x27;list&#x27; object has no attribute &#x27;keys&#x27;</span><br><span class="line">Cannot connect to comfyregistry.</span><br></pre></td></tr></table></figure><p>但通过comfyui界面执行是正常的,这是因为自动隐式兼容处理了,工作流设计不规范,导致某些节点列表和字典返回值混淆,导出.json时,数据是严格按照JSON结构来的,没有GUI的自动纠正机制,所以会报错.</p><p>最后排查到 报错的节点如下</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">&quot;25&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;inputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;class_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PulidEvaClipLoader&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PuLIDEVAClip加载器&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>  由于25号节点 inputs为空,默认返回了空list,而非字典类型dict,但是PulidEvaClipLoader插件要求输入为字典类型</p><p>  实际操作改为如下,增加默认值即可<br>  <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  <span class="attr">&quot;25&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;inputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 添加任意有效字段占位（例如模型路径）</span></span><br><span class="line">    <span class="attr">&quot;dummy_param&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span>  </span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;class_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PulidEvaClipLoader&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_meta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PuLIDEVAClip加载器&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过接口Api执行工作流报错如下,&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;got prompt&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="comfyui" scheme="https://harrywork.com/blog/tags/comfyui/"/>
    
  </entry>
  
  <entry>
    <title>修改视频元信息时长 duration修改</title>
    <link href="https://harrywork.com/blog/p/2025videoduration/"/>
    <id>https://harrywork.com/blog/p/2025videoduration/</id>
    <published>2025-03-16T00:47:29.000Z</published>
    <updated>2025-04-02T05:28:52.790Z</updated>
    
    <content type="html"><![CDATA[<p>下载 010Editor免费版 <a href="https://sweetscape.com/010editor/">https://sweetscape.com/010editor/</a><br><img src="https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2025/010Ed150Hex.png" alt="alt text"></p><p>打开 010Editor , 按下Ctrl+O 打开要修改的视频</p><p>找到duration标签 更改时长 然后保存<br><img src="https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2025/edit_duration.png" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下载 010Editor免费版 &lt;a href=&quot;https://sweetscape.com/010editor/&quot;&gt;https://sweetscape.com/010editor/&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://ihogu-1251903635.c</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="视频" scheme="https://harrywork.com/blog/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>comfyui gemeni apikey 配置</title>
    <link href="https://harrywork.com/blog/p/2025comfyuigemeniapikey/"/>
    <id>https://harrywork.com/blog/p/2025comfyuigemeniapikey/</id>
    <published>2025-03-15T00:47:29.000Z</published>
    <updated>2025-04-01T07:42:40.197Z</updated>
    
    <content type="html"><![CDATA[<p>&#x2F;root&#x2F;ComfyUI&#x2F;custom_nodes&#x2F;ComfyUI_LayerStyle_Advance&#x2F;api_key.ini</p><p><a href="https://console.cloud.google.com/apis/library/generativelanguage.googleapis.com?project=aqueous-impact-386909&inv=1&invt=AbtkIg">https://console.cloud.google.com/apis/library/generativelanguage.googleapis.com?project=aqueous-impact-386909&amp;inv=1&amp;invt=AbtkIg</a></p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">google api <span class="attr">key</span>=xxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;#x2F;root&amp;#x2F;ComfyUI&amp;#x2F;custom_nodes&amp;#x2F;ComfyUI_LayerStyle_Advance&amp;#x2F;api_key.ini&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://console.cloud.google.c</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="ComfyUI" scheme="https://harrywork.com/blog/tags/ComfyUI/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg 中文乱码 windows</title>
    <link href="https://harrywork.com/blog/p/ffmpegzhognwenluanmawinds/"/>
    <id>https://harrywork.com/blog/p/ffmpegzhognwenluanmawinds/</id>
    <published>2024-10-15T00:47:29.000Z</published>
    <updated>2024-09-28T08:06:09.218Z</updated>
    
    <content type="html"><![CDATA[<p>ffmpeg 中文乱码<br>先去Windows字体库 C:\Windows\Fonts , 复制微软雅黑msyhl.ttc,到ffmpeg运行目录 </p><p>ffmpeg里字库文件改成这样:fontfile&#x3D;’msyhl.ttc’</p><p>再重新执行就可以了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ffmpeg 中文乱码&lt;br&gt;先去Windows字体库 C:&#92;Windows&#92;Fonts , 复制微软雅黑msyhl.ttc,到ffmpeg运行目录 &lt;/p&gt;
&lt;p&gt;ffmpeg里字库文件改成这样:fontfile&amp;#x3D;’msyhl.ttc’&lt;/p&gt;
&lt;p&gt;再重新执行</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="字体" scheme="https://harrywork.com/blog/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>canvas绘制文字彩虹弯曲弧形效果 Vue.js</title>
    <link href="https://harrywork.com/blog/p/canvascaihonghuizhitext/"/>
    <id>https://harrywork.com/blog/p/canvascaihonghuizhitext/</id>
    <published>2024-05-25T00:47:29.000Z</published>
    <updated>2024-05-24T07:03:15.089Z</updated>
    
    <content type="html"><![CDATA[<p>demo image</p><p><img src="https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2024/canvascaihonghuizhitext.png" alt="demo image"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">:width</span>=<span class="string">&quot;canvasWidth&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;canvasHeight&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">text</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="string">&#x27;阿斯顿发斯蒂芬&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">required</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">radius</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">200</span> <span class="comment">// 控制文字弯曲的半径</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">canvasWidth</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">500</span> <span class="comment">// Canvas 宽度</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">canvasHeight</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">600</span> <span class="comment">// Canvas 高度</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">fontSize</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">32</span> <span class="comment">// 字体大小</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">curvature</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">0.5</span> <span class="comment">// 弯曲度，可以通过调整来改变弧度</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">letterSpacing</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">0</span> <span class="comment">// 字距</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">startAngle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">0</span> <span class="comment">// 起始角度</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">ellipseFactor</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">default</span>: <span class="number">1</span> <span class="comment">// 椭圆因子，1表示圆形，&lt;1表示垂直压缩，&gt;1表示水平拉伸</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">drawCurvedText</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> canvas = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">canvas</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置字体</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">font</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.fontSize&#125;</span>px Arial`</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">textBaseline</span> = <span class="string">&#x27;middle&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> text = <span class="variable language_">this</span>.<span class="property">text</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> radius = <span class="variable language_">this</span>.<span class="property">radius</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> canvasWidth = <span class="variable language_">this</span>.<span class="property">canvasWidth</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> canvasHeight = <span class="variable language_">this</span>.<span class="property">canvasHeight</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> textLength = text.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> letterSpacing = <span class="variable language_">this</span>.<span class="property">letterSpacing</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> startAngle = <span class="variable language_">this</span>.<span class="property">startAngle</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ellipseFactor = <span class="variable language_">this</span>.<span class="property">ellipseFactor</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 中心点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> centerX = canvasWidth / <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> centerY = canvasHeight / <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 弧度范围：从 -curvature 到 curvature</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> angleRange = <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">curvature</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 每个字符的角度差，考虑字距</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> totalSpacing = letterSpacing * (textLength - <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> angleStep = (angleRange - totalSpacing / radius) / (textLength - <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 计算起始角度，使得中间的字是正竖着的</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> halfTextLength = <span class="title class_">Math</span>.<span class="title function_">floor</span>(textLength / <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; textLength; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> char = text[i];</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当前字符的角度，相对于中间字符的对称分布</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> angle = startAngle + (i - halfTextLength) * (angleStep + letterSpacing / radius);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> x = centerX + radius * <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle) * ellipseFactor;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> y = centerY - radius * <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 保存当前绘图状态</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">save</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 移动画布到字符位置并旋转</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">translate</span>(x, y);</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">rotate</span>(angle); <span class="comment">// 直接使用当前字符的角度旋转</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果是中间的字符，保持正竖着</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (i === halfTextLength) &#123;</span></span><br><span class="line"><span class="language-javascript">          ctx.<span class="title function_">rotate</span>(-angle); <span class="comment">// 中间字符保持正竖着</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 绘制字符</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">fillText</span>(char, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 恢复之前保存的绘图状态</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">restore</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">text</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">radius</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">canvasWidth</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">canvasHeight</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fontSize</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">curvature</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">letterSpacing</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">startAngle</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">ellipseFactor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">drawCurvedText</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">canvas</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">canvas绘制文字彩虹弯曲弧形效果 Vue.js</summary>
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="canvas" scheme="https://harrywork.com/blog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序加载字体安卓真机失效问题</title>
    <link href="https://harrywork.com/blog/p/2024weixinminifontload/"/>
    <id>https://harrywork.com/blog/p/2024weixinminifontload/</id>
    <published>2024-05-15T00:47:29.000Z</published>
    <updated>2024-05-15T13:38:41.274Z</updated>
    
    <content type="html"><![CDATA[<p>使用wx.loadFontFace方式加载字体,在开发工具和苹果真机字体可以正常加载,但是在安卓真机却总是出发fail回调,而且没有原因只返回{“status”: “error”}</p><p>最终发现解决方案如下:</p><p>微信小程序的请求域名是这个 servicewechat.com , 需要增加cors支持<br>或者去Nginx配置中增加字体文件的跨域支持</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//nginx </span><br><span class="line">location ~* \.(eot|ttf|woff|woff2|svg)$ &#123;</span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用wx.loadFontFace方式加载字体,在开发工具和苹果真机字体可以正常加载,但是在安卓真机却总是出发fail回调,而且没有原因只返回{“status”: “error”}&lt;/p&gt;
&lt;p&gt;最终发现解决方案如下:&lt;/p&gt;
&lt;p&gt;微信小程序的请求域名是这个 servic</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="字体" scheme="https://harrywork.com/blog/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>PHP直接输出二进制图片 显示图片 ThinkPHP直接输出二进制图片显示</title>
    <link href="https://harrywork.com/blog/p/2024phpshuchutupian/"/>
    <id>https://harrywork.com/blog/p/2024phpshuchutupian/</id>
    <published>2024-05-01T00:47:29.000Z</published>
    <updated>2024-04-30T16:30:00.845Z</updated>
    
    <content type="html"><![CDATA[<p>关键是从 ob_end_clean(); 开始的这一段代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 读取背景图片和目标图片</span></span><br><span class="line"><span class="variable">$backgroundPath</span> = <span class="string">&#x27;背景图路径&#x27;</span>;</span><br><span class="line"><span class="variable">$overlayPath</span> = <span class="string">&#x27;要覆盖的路径&#x27;</span>;</span><br><span class="line"><span class="comment">// 获取背景图片和目标图片的资源</span></span><br><span class="line"><span class="variable">$background</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$backgroundPath</span>);</span><br><span class="line"><span class="variable">$overlay</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$overlayPath</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取目标图片的宽度和高度</span></span><br><span class="line"><span class="variable">$overlayWidth</span> = <span class="title function_ invoke__">imagesx</span>(<span class="variable">$overlay</span>);</span><br><span class="line"><span class="variable">$overlayHeight</span> = <span class="title function_ invoke__">imagesy</span>(<span class="variable">$overlay</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将目标图片叠加到背景图片上</span></span><br><span class="line"><span class="title function_ invoke__">imagecopy</span>(<span class="variable">$background</span>, <span class="variable">$overlay</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$overlayWidth</span>, <span class="variable">$overlayHeight</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的图像资源</span></span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="variable">$overlayWidth</span>, <span class="variable">$overlayHeight</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制叠加后的图像到输出图像</span></span><br><span class="line"><span class="title function_ invoke__">imagecopy</span>(<span class="variable">$output</span>, <span class="variable">$background</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">$overlayWidth</span>, <span class="variable">$overlayHeight</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:image/png&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="title function_ invoke__">imagejpeg</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line"><span class="keyword">die</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关键是从 ob_end_clean(); 开始的这一段代码&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="php" scheme="https://harrywork.com/blog/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Python先顺序分组然后打乱分组顺序</title>
    <link href="https://harrywork.com/blog/p/2023PythonSequential/"/>
    <id>https://harrywork.com/blog/p/2023PythonSequential/</id>
    <published>2023-05-04T00:47:29.000Z</published>
    <updated>2024-04-07T01:02:03.652Z</updated>
    
    <content type="html"><![CDATA[<p>Python先顺序分组然后打乱分组顺序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合并ts视频</span></span><br><span class="line"><span class="keyword">import</span> os,time ,random, shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义循环次数</span></span><br><span class="line">loop_times = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用来分组排序的数组</span></span><br><span class="line">mySortArr = []</span><br><span class="line">path = <span class="string">r&quot;D:\XXX\视频ts文件夹&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.ts&#x27;</span>):</span><br><span class="line">       mySortArr.append(file)</span><br><span class="line"></span><br><span class="line"><span class="comment">#每个分组最小包含文件数</span></span><br><span class="line">maxFileNum = <span class="number">4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_all_index</span>(<span class="params">arr, item</span>):</span><br><span class="line">    <span class="keyword">return</span> [i <span class="keyword">for</span> i, a <span class="keyword">in</span> <span class="built_in">enumerate</span>(arr) <span class="keyword">if</span> a == item]</span><br><span class="line">randomListMax = <span class="built_in">len</span>(mySortArr)*<span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sortA</span>(<span class="params">filelist</span>):</span><br><span class="line">    tempGroupList = []</span><br><span class="line">    <span class="comment">#分组</span></span><br><span class="line">    groupList = []</span><br><span class="line">    tempGroupLIst = []</span><br><span class="line">    tempGroupAppendIndex=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> tempGroupAppendIndex &lt; randomListMax+<span class="number">1</span>:</span><br><span class="line">      groupList.append(<span class="number">0</span>)</span><br><span class="line">      tempGroupAppendIndex += <span class="number">1</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    countNum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> filelist:   <span class="comment">#遍历所有文件</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        countNum +=<span class="number">1</span></span><br><span class="line">        tempGroupList.append(files)</span><br><span class="line">        randomIndex = random.randint(<span class="number">0</span>,randomListMax)  </span><br><span class="line">        hasPlaceholder = find_all_index(groupList,tempGroupLIst)</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">len</span>(hasPlaceholder)!=<span class="number">0</span>):</span><br><span class="line">          randomIndex = random.randint(<span class="number">0</span>,randomListMax)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> countNum &gt;= maxFileNum :    </span><br><span class="line">             countNum = <span class="number">0</span>            </span><br><span class="line">            <span class="comment">#  print(randomIndex,&quot;randomIndex&quot;)      </span></span><br><span class="line">             rIndex = <span class="number">0</span></span><br><span class="line">             <span class="keyword">for</span> tempItem <span class="keyword">in</span> tempGroupList:</span><br><span class="line">                  rIndex+=<span class="number">1</span></span><br><span class="line">                  groupList[randomIndex+rIndex] = tempItem</span><br><span class="line">             tempItemR = <span class="built_in">reversed</span>(tempGroupList)    <span class="comment"># 倒序           </span></span><br><span class="line">             <span class="keyword">for</span> tempItem <span class="keyword">in</span> tempItemR:</span><br><span class="line">                  groupList[randomIndex+rIndex+<span class="built_in">len</span>(tempGroupLIst)] = tempItem    </span><br><span class="line">                  rIndex+=<span class="number">1</span>      </span><br><span class="line">             tempItemR = []</span><br><span class="line">             tempGroupList = []</span><br><span class="line"></span><br><span class="line">    removeGroupList = groupList</span><br><span class="line">    listRes = []</span><br><span class="line">    <span class="keyword">for</span> groupItemOld <span class="keyword">in</span> removeGroupList:      </span><br><span class="line">      <span class="keyword">if</span>(groupItemOld!=<span class="number">0</span>):</span><br><span class="line">        listRes.append(groupItemOld) </span><br><span class="line">    <span class="comment"># random.shuffle(filelist)</span></span><br><span class="line">    <span class="comment"># print(listRes,&quot;listRes&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> listRes</span><br><span class="line"><span class="comment">#/sort$############################</span></span><br><span class="line"></span><br><span class="line">mySortArr = sortA(mySortArr)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 执行循环遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, loop_times + <span class="number">1</span>):</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:     </span><br><span class="line">    <span class="keyword">for</span> content <span class="keyword">in</span> mySortArr:   </span><br><span class="line">        f.write(<span class="string">f&quot;file &#x27;<span class="subst">&#123;content&#125;</span>&#x27;\n&quot;</span>)</span><br><span class="line">    <span class="comment"># print(f&quot;&#123;i&#125;.txt 文件生成成功！&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#quit()</span></span><br><span class="line"><span class="comment"># 合并txt文件</span></span><br><span class="line">os.system(<span class="string">&#x27;copy /B ?*.txt output.txt&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;合并txt文件成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除生成的i.txt文件</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, loop_times + <span class="number">1</span>):</span><br><span class="line">    os.remove(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.txt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i.txt 文件删除成功！&quot;</span>)</span><br><span class="line"><span class="comment"># 执行ffmpeg合并</span></span><br><span class="line">os.system(<span class="string">&#x27;ffmpeg -f concat -safe 0 -i output.txt -c copy 合成视频.mp4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ffmpeg合并成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 output.txt 文件</span></span><br><span class="line">os.remove(<span class="string">&#x27;output.txt&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;output.txt 文件删除成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下所有.ts格式的视频文件</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.ts&#x27;</span>):</span><br><span class="line">        os.remove(filename)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;.ts格式 文件删除成功！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有前缀为images_的文件夹</span></span><br><span class="line"><span class="keyword">for</span> foldername <span class="keyword">in</span> os.listdir(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> foldername.startswith(<span class="string">&#x27;images_&#x27;</span>):</span><br><span class="line">        shutil.rmtree(foldername)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;images_ 文件删除成功！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python先顺序分组然后打乱分组顺序&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 合并ts</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="python" scheme="https://harrywork.com/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>fastadmin引入layui,并调用layui接口</title>
    <link href="https://harrywork.com/blog/p/2023IntroducingLayui/"/>
    <id>https://harrywork.com/blog/p/2023IntroducingLayui/</id>
    <published>2023-04-23T00:47:29.000Z</published>
    <updated>2024-04-07T01:02:03.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一种方式-全局引入"><a href="#第一种方式-全局引入" class="headerlink" title="第一种方式,全局引入"></a>第一种方式,全局引入</h2><h3 id="先去-layui-官网-下载整个仓库-有-dist-src-目录的"><a href="#先去-layui-官网-下载整个仓库-有-dist-src-目录的" class="headerlink" title="先去 layui 官网,下载整个仓库 , 有 dist,src 目录的"></a>先去 layui 官网,下载整个仓库 , 有 dist,src 目录的</h3><p><a href="https://gitee.com/layui/layui">https://gitee.com/layui/layui</a></p><h3 id="把下载的-layui-放到如下目录"><a href="#把下载的-layui-放到如下目录" class="headerlink" title="把下载的 layui 放到如下目录:"></a>把下载的 layui 放到如下目录:</h3><blockquote><p>public&#x2F;libs&#x2F;layui</p></blockquote><h3 id="在下面的文件里-添加-layui-paths-和-shim-中分别添加"><a href="#在下面的文件里-添加-layui-paths-和-shim-中分别添加" class="headerlink" title="在下面的文件里,添加 layui,paths 和 shim 中分别添加"></a>在下面的文件里,添加 layui,paths 和 shim 中分别添加</h3><blockquote><p>public&#x2F;assets&#x2F;js&#x2F;require-backend.js</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="comment">//添加layui</span></span><br><span class="line">    <span class="attr">layui</span>: <span class="string">&quot;../libs/layui/src/layui&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// shim依赖配置</span></span><br><span class="line">  <span class="attr">shim</span>: &#123;</span><br><span class="line">    <span class="comment">//添加layui</span></span><br><span class="line">    <span class="attr">layui</span>: &#123;</span><br><span class="line">      <span class="attr">deps</span>: [<span class="string">&quot;css!../libs/layui/src/css/layui.css&quot;</span>],</span><br><span class="line">      <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在这里init了layui&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">layui</span>.<span class="title function_">config</span>(&#123; <span class="attr">dir</span>: <span class="string">&quot;/assets/libs/layui/src/&quot;</span> &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="目标页-JS-调用"><a href="#目标页-JS-调用" class="headerlink" title="目标页 JS 调用"></a>目标页 JS 调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;jquery&quot;</span>, <span class="string">&quot;bootstrap&quot;</span>, <span class="string">&quot;backend&quot;</span>, <span class="string">&quot;form&quot;</span>, <span class="string">&quot;table&quot;</span>, <span class="string">&quot;layui&quot;</span>], <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  $,</span></span><br><span class="line"><span class="params">  <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params">  Backend,</span></span><br><span class="line"><span class="params">  Form,</span></span><br><span class="line"><span class="params">  Table,</span></span><br><span class="line"><span class="params">  layui</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Controller</span> = &#123;</span><br><span class="line">    <span class="attr">index</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//在这里进行调用</span></span><br><span class="line">      layui.<span class="title function_">use</span>([<span class="string">&quot;form&quot;</span>, <span class="string">&quot;upload&quot;</span>], <span class="keyword">function</span> (<span class="params">form, upload</span>) &#123;&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Controller</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一键压缩打包前后台的JS和CSS, 根目录中执行下面命令后,在浏览器清除缓存刷新才能生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php think min -m all -r all</span><br></pre></td></tr></table></figure><h2 id="二-动态引入"><a href="#二-动态引入" class="headerlink" title="二:动态引入"></a>二:动态引入</h2><h3 id="首先在public-assets-js-backend-init-js中定义依赖配置"><a href="#首先在public-assets-js-backend-init-js中定义依赖配置" class="headerlink" title="首先在public&#x2F;assets&#x2F;js&#x2F;backend-init.js中定义依赖配置"></a>首先在public&#x2F;assets&#x2F;js&#x2F;backend-init.js中定义依赖配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&#x27;backend&#x27;</span>], <span class="keyword">function</span> (<span class="params">Backend</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span><br><span class="line">        <span class="attr">paths</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;layui&#x27;</span>: <span class="string">&#x27;../libs/layui/src/layui&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">shim</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;layui&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">deps</span>: [<span class="string">&#x27;css!../libs/layui/src/css/layui.css&#x27;</span>],</span><br><span class="line">                <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在这里init了layui&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">layui</span>.<span class="title function_">config</span>(&#123; <span class="attr">dir</span>: <span class="string">&#x27;/assets/libs/layui/src/&#x27;</span> &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="目标页-JS-调用-1"><a href="#目标页-JS-调用-1" class="headerlink" title="目标页 JS 调用"></a>目标页 JS 调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;jquery&quot;</span>, <span class="string">&quot;bootstrap&quot;</span>, <span class="string">&quot;backend&quot;</span>, <span class="string">&quot;form&quot;</span>, <span class="string">&quot;table&quot;</span>, <span class="string">&quot;layui&quot;</span>], <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  $,</span></span><br><span class="line"><span class="params">  <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="params">  Backend,</span></span><br><span class="line"><span class="params">  Form,</span></span><br><span class="line"><span class="params">  Table,</span></span><br><span class="line"><span class="params">  layui</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Controller</span> = &#123;</span><br><span class="line">    <span class="attr">index</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">//在这里进行调用</span></span><br><span class="line">      <span class="built_in">require</span>([<span class="string">&quot;layui&quot;</span>], <span class="keyword">function</span> (<span class="params"><span class="literal">undefined</span></span>) &#123;</span><br><span class="line">        layui.<span class="title function_">use</span>([<span class="string">&quot;form&quot;</span>, <span class="string">&quot;upload&quot;</span>], <span class="keyword">function</span> (<span class="params">form, upload</span>) &#123;&#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Controller</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一键压缩打包前后台的JS和CSS, 根目录中执行下面命令后,在浏览器清除缓存刷新才能生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php think min -m all -r all</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一种方式-全局引入&quot;&gt;&lt;a href=&quot;#第一种方式-全局引入&quot; class=&quot;headerlink&quot; title=&quot;第一种方式,全局引入&quot;&gt;&lt;/a&gt;第一种方式,全局引入&lt;/h2&gt;&lt;h3 id=&quot;先去-layui-官网-下载整个仓库-有-dist-src-目录的</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="php" scheme="https://harrywork.com/blog/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Python 文件夹内文件 批量打乱顺序后,重新排序,批量重命名</title>
    <link href="https://harrywork.com/blog/p/2023PythonBatch/"/>
    <id>https://harrywork.com/blog/p/2023PythonBatch/</id>
    <published>2023-04-22T00:47:29.000Z</published>
    <updated>2024-04-07T01:02:03.653Z</updated>
    
    <content type="html"><![CDATA[<p>手头有一个几万张图片需要进行打乱顺序,并重新命名,使用python来实现</p><p>第一步先对文件夹内的文件批量打乱顺序</p><p>第二步重新排序</p><p>第三步批量重命名</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os ,random , time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rename</span>():</span><br><span class="line">    <span class="comment"># 配置</span></span><br><span class="line">    <span class="comment">#文件扩展名</span></span><br><span class="line">    filetype = <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    <span class="comment">#文件名前缀</span></span><br><span class="line">    filename = <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">    <span class="comment"># 文件名位数,不足的前面补0</span></span><br><span class="line">    zfillNum = <span class="number">5</span></span><br><span class="line">    <span class="comment"># 在这里配置文件夹地址</span></span><br><span class="line">    path = <span class="string">r&quot;C:\Users\xxxx\Desktop\test&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    filelist = os.listdir(path)   <span class="comment">#该文件夹下所有的文件（包括文件夹）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#先打乱顺序 </span></span><br><span class="line">    random.shuffle(filelist)</span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> filelist:   <span class="comment">#遍历所有文件</span></span><br><span class="line">        Olddir = os.path.join(path, files)    <span class="comment">#原来的文件路径</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(Olddir):       <span class="comment">#如果是文件夹则跳过</span></span><br><span class="line">                <span class="keyword">continue</span>   </span><br><span class="line">        filenameRes = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time())+random.randint(<span class="number">1000000</span>,<span class="number">88888888</span>))</span><br><span class="line">        Newdir = os.path.join(path, filenameRes + filetype)   <span class="comment">#新的文件路径</span></span><br><span class="line">        os.rename(Olddir, Newdir)    <span class="comment">#重命名</span></span><br><span class="line"></span><br><span class="line">    filelist = os.listdir(path)   <span class="comment">#该文件夹下所有的文件（包括文件夹）</span></span><br><span class="line">    <span class="keyword">for</span> files <span class="keyword">in</span> filelist:   <span class="comment">#遍历所有文件</span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        Olddir = os.path.join(path, files)    <span class="comment">#原来的文件路径</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(Olddir):       <span class="comment">#如果是文件夹则跳过</span></span><br><span class="line">                <span class="keyword">continue</span>   </span><br><span class="line">        filenameNum = <span class="built_in">str</span>(i).zfill(zfillNum)</span><br><span class="line">        filenameRes = filename+filenameNum</span><br><span class="line">        Newdir = os.path.join(path, filenameRes + filetype)   <span class="comment">#新的文件路径</span></span><br><span class="line">        os.rename(Olddir, Newdir)    <span class="comment">#重命名</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    rename()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;手头有一个几万张图片需要进行打乱顺序,并重新命名,使用python来实现&lt;/p&gt;
&lt;p&gt;第一步先对文件夹内的文件批量打乱顺序&lt;/p&gt;
&lt;p&gt;第二步重新排序&lt;/p&gt;
&lt;p&gt;第三步批量重命名&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="python" scheme="https://harrywork.com/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>VCARD手机相机扫码或微信扫码,直接保存到通讯录</title>
    <link href="https://harrywork.com/blog/p/2023SaveVCARD/"/>
    <id>https://harrywork.com/blog/p/2023SaveVCARD/</id>
    <published>2023-04-20T00:47:29.000Z</published>
    <updated>2024-04-07T01:02:03.653Z</updated>
    
    <content type="html"><![CDATA[<p>VCARD手机相机扫码或微信扫码,直接保存到通讯录<br>将以下内容生成二维码, 使用手机扫码时将自动弹出保存通讯录,兼容Android&#x2F;IOS</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BEGIN:VCARD</span><br><span class="line"></span><br><span class="line">VERSION:3.0</span><br><span class="line"></span><br><span class="line">N:名字</span><br><span class="line"></span><br><span class="line">ORG:公司名字</span><br><span class="line"></span><br><span class="line">TITLE:职位新人研发</span><br><span class="line"></span><br><span class="line">TEL;TYPE=WORK:18888886686</span><br><span class="line"></span><br><span class="line">TEL;TYPE=HOME:18888888888</span><br><span class="line"></span><br><span class="line">ADR;TYPE=HOME:;;地址1;;;;</span><br><span class="line"></span><br><span class="line">LABEL;TYPE=HOME:地址2</span><br><span class="line"></span><br><span class="line">,  </span><br><span class="line"></span><br><span class="line">EMAIL:email@gmail.com</span><br><span class="line"></span><br><span class="line">URL:www.abc.com</span><br><span class="line"></span><br><span class="line">BDAY:2023-04-23</span><br><span class="line"></span><br><span class="line">REV:2023-04-23T01:21:04Z</span><br><span class="line"></span><br><span class="line">END:VCARD</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VCARD手机相机扫码或微信扫码,直接保存到通讯录&lt;br&gt;将以下内容生成二维码, 使用手机扫码时将自动弹出保存通讯录,兼容Android&amp;#x2F;IOS&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vcard" scheme="https://harrywork.com/blog/tags/vcard/"/>
    
  </entry>
  
  <entry>
    <title>electron 解决socket端口被占用问题 启动socket服务,自动尝试可用接口</title>
    <link href="https://harrywork.com/blog/p/2023OElectron/"/>
    <id>https://harrywork.com/blog/p/2023OElectron/</id>
    <published>2023-04-13T00:47:29.000Z</published>
    <updated>2024-04-07T01:02:03.654Z</updated>
    
    <content type="html"><![CDATA[<p>原理是本地写一个config.json,把初始端口放进去,每次启动electron的socket服务时如果发现端口被占用,就更新config.json里的端口号加1,并保存到config.json,然后退出并重启electron,直到找到可用的端口</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span><span class="number">1081</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, protocol, dialog &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Menu</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;electron&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> myMenu = <span class="built_in">require</span>(<span class="string">&quot;./src/menu.js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&quot;ws&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">//wss通讯服务</span></span><br><span class="line">  <span class="keyword">let</span> wss = &#123;&#125;;</span><br><span class="line">  <span class="title function_">openWs</span>();</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">openWs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;config.json&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err, configFileDataRes</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        dialog.<span class="title function_">showMessageBox</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&quot;读取配置文件失败&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;请重新安装&quot;</span>,</span><br><span class="line">          <span class="attr">detail</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(err),</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> configFileData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(configFileDataRes);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; <span class="attr">port</span>: configFileData.<span class="property">port</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;创建webSocket失败:&quot;</span>, error);</span><br><span class="line">      &#125;</span><br><span class="line">      wss.<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ws, configFileData.<span class="property">port</span> + <span class="string">&quot;成功了&quot;</span>);</span><br><span class="line">        <span class="comment">/** 调用原生electron接口</span></span><br><span class="line"><span class="comment">         * &#123;&quot;type&quot;:&quot;open_page&quot;,&quot;src&quot;:&quot;pages/play/index.html&quot;,&quot;big&quot;:true&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ws.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">          message = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(message);</span><br><span class="line">          <span class="keyword">if</span> (message.<span class="property">type</span> == <span class="string">&quot;open_page&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>();</span><br><span class="line">            win.<span class="title function_">loadFile</span>(message.<span class="property">src</span>);</span><br><span class="line">            win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>(&#123; <span class="attr">mode</span>: <span class="string">&quot;detach&quot;</span> &#125;);</span><br><span class="line">            <span class="keyword">if</span> (message.<span class="property">big</span>) &#123;</span><br><span class="line">              win.<span class="title function_">maximize</span>();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="string">&quot;something&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      wss.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">storeData</span>(&#123; <span class="attr">port</span>: <span class="built_in">parseInt</span>(configFileData.<span class="property">port</span>) + <span class="number">1</span> &#125;, <span class="string">&quot;config.json&quot;</span>);</span><br><span class="line">        app.<span class="title function_">exit</span>();</span><br><span class="line">        app.<span class="title function_">relaunch</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// /wss通讯服务</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原理是本地写一个config.json,把初始端口放进去,每次启动electron的socket服务时如果发现端口被占用,就更新config.json里的端口号加1,并保存到config.json,然后退出并重启electron,直到找到可用的端口&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="electron" scheme="https://harrywork.com/blog/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>第一次参加半马</title>
    <link href="https://harrywork.com/blog/p/2023Myfirsttimeparticipating/"/>
    <id>https://harrywork.com/blog/p/2023Myfirsttimeparticipating/</id>
    <published>2023-03-19T04:50:31.000Z</published>
    <updated>2024-04-07T01:02:03.660Z</updated>
    
    <content type="html"><![CDATA[<p>这周末和女朋友一起参加半马,青岛西海岸风景真不错,新铺的马路贼宽敞,七点多就开始交通管制了,我们只能打车到附近然后走过去 </p><p>比赛现场很热闹,没文化的我现场只能来一句只能来一句人好多啊,气氛真的很好,菜腿第一次参加没敢直接报名半马,报了五公里健康跑😄</p><p>坚持不懈的青春万岁  加油💪奥力给 </p><div class="gallery-container" data-type="data" data-button="" data-limit="10" data-first="10">    <div class="gallery-items">[{"url":"https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2023/1%20%281%29.jpg","alt":"","title":""},{"url":"https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2023/1%20%282%29.jpg","alt":"","title":""},{"url":"https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2023/1%20%283%29.jpg","alt":"","title":""},{"url":"https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2023/1%20%284%29.jpg","alt":"","title":""},{"url":"https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2023/1%20%285%29.jpg","alt":"","title":""},{"url":"https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2023/1%20%286%29.jpg","alt":"","title":""},{"url":"https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2023/1%20%287%29.jpg","alt":"","title":""},{"url":"https://ihogu-1251903635.cos.ap-shanghai.myqcloud.com/site/blog/img/2023/1%20%288%29.jpg","alt":"","title":""}]</div>  </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这周末和女朋友一起参加半马,青岛西海岸风景真不错,新铺的马路贼宽敞,七点多就开始交通管制了,我们只能打车到附近然后走过去 &lt;/p&gt;
&lt;p&gt;比赛现场很热闹,没文化的我现场只能来一句只能来一句人好多啊,气氛真的很好,菜腿第一次参加没敢直接报名半马,报了五公里健康跑😄&lt;/p&gt;
</summary>
      
    
    
    
    <category term="随笔" scheme="https://harrywork.com/blog/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="马拉松" scheme="https://harrywork.com/blog/tags/%E9%A9%AC%E6%8B%89%E6%9D%BE/"/>
    
    <category term="跑步" scheme="https://harrywork.com/blog/tags/%E8%B7%91%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>JS飞入飞出动画 加速动画 换入换出效果</title>
    <link href="https://harrywork.com/blog/p/2023JSFlying/"/>
    <id>https://harrywork.com/blog/p/2023JSFlying/</id>
    <published>2023-03-14T01:47:29.000Z</published>
    <updated>2024-04-07T01:02:03.651Z</updated>
    
    <content type="html"><![CDATA[<p>JS飞入飞出动画 加速动画 换入换出效果</p><p>在线预览 <a href="/my/demo/fly.html">&#x2F;my&#x2F;demo&#x2F;fly.html</a> online visit </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gift-fly&quot;</span> <span class="attr">style</span>=<span class="string">&quot; position: absolute; width: 50px;height: 50px;background-color: #327dff &quot;</span>&gt;</span> 动画盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> flyDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;gift-fly&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">animate</span>(flyDiv, &#123;<span class="string">&quot;left&quot;</span>: <span class="number">500</span>&#125;, <span class="number">3000</span>, <span class="string">&quot;easeIn&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;飞入动画执行完了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">animate</span>(flyDiv, &#123;<span class="string">&quot;left&quot;</span>: <span class="number">0</span>&#125;, <span class="number">3000</span>, <span class="string">&quot;easeOut&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;飞出动画执行完了&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * <span class="doctag">@param</span> elem &#123;HTMLElement&#125; 执行动画的HTML元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * <span class="doctag">@param</span> params &#123;JSON&#125; 动画执行过过程中需要修改的HTML属性</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * <span class="doctag">@param</span> duration &#123;Number&#125; 可选，动画执行时间，单位毫秒</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     * <span class="doctag">@param</span> easing &#123;String&#125; 可选，动画执行的方式，缓入easeIn、缓出easeOut</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">elem, params, duration, easing</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * 描述: tween动画算法。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * @param Number t: 动画已经执行的时间（实际上时执行多少次/帧数）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * @param Number b: 起始位置</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * @param Number c: 终止位置</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * @param Number d: 从起始位置到终止位置的经过时间（实际上时执行多少次/帧数）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> tween = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">easeIn</span>: <span class="keyword">function</span> (<span class="params">t, b, c, d</span>) &#123;<span class="comment">//缓入</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> c * (t /= d) * t + b;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">easeOut</span>: <span class="keyword">function</span> (<span class="params">t, b, c, d</span>) &#123;<span class="comment">//缓出</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> -c * (t /= d) * (t - <span class="number">2</span>) + b;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> attribute = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">elem, attr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> val;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (elem.<span class="property">currentStyle</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (attr === <span class="string">&quot;opacity&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            val = elem.<span class="property">filters</span>.<span class="property">alpha</span>[attr];</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            val = elem.<span class="property">currentStyle</span>[attr];</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        val = <span class="title function_">getComputedStyle</span>(elem)[attr];</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (attr === <span class="string">&quot;opacity&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            val = <span class="number">100</span> * val;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> val;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">elem, attr, val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (attr == <span class="string">&#x27;opacity&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        elem.<span class="property">style</span>.<span class="property">filter</span> = <span class="string">&#x27;alpha(opacity=&#x27;</span> + (val) + <span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                        elem.<span class="property">style</span>.<span class="property">opacity</span> = (val) / <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        elem.<span class="property">style</span>[attr] = val + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> effect = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">animate</span>: <span class="keyword">function</span> (<span class="params">elem, params, duration, easing</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>(),</span></span><br><span class="line"><span class="language-javascript">                        b = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                        c = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">                        d = duration || <span class="number">500</span>,</span></span><br><span class="line"><span class="language-javascript">                        fps = <span class="number">1000</span> / <span class="number">60</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> changes = [];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> params) &#123;</span></span><br><span class="line"><span class="language-javascript">                        b = <span class="built_in">parseFloat</span>(attribute.<span class="title function_">get</span>(elem, attr));</span></span><br><span class="line"><span class="language-javascript">                        c = params[attr] - b;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        changes.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">attr</span>: attr,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">b</span>: b,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">c</span>: c</span></span><br><span class="line"><span class="language-javascript">                        &#125;);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    easing = easing || <span class="string">&quot;easeOut&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> t = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() - dt;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> b, c, attr;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; changes.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                            b = changes[i].<span class="property">b</span>;</span></span><br><span class="line"><span class="language-javascript">                            c = changes[i].<span class="property">c</span>;</span></span><br><span class="line"><span class="language-javascript">                            attr = changes[i].<span class="property">attr</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            attribute.<span class="title function_">set</span>(elem, attr, tween[easing](t, b, c, d));</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span> (d &lt;= t) &#123;</span></span><br><span class="line"><span class="language-javascript">                                attribute.<span class="title function_">set</span>(elem, attr, params[attr]);</span></span><br><span class="line"><span class="language-javascript">                                <span class="title function_">success</span>();</span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                            &#125;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="built_in">setTimeout</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>, fps);</span></span><br><span class="line"><span class="language-javascript">                    &#125;, fps);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            effect.<span class="title function_">animate</span>(elem, params, duration, easing);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JS飞入飞出动画 加速动画 换入换出效果  * @param elem {HTMLElement} 执行动画的HTML元素 * @param params {JSON} 动画执行过过程中需要修改的HTML属性  * @param duration {Number} 可选，动画执行时间，单位毫秒   * @param easing {String} 可选，动画执行的方式，缓入easeIn、缓出easeOut</summary>
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://harrywork.com/blog/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Go排序结构体struct中字段提升性能,降低内存使用率</title>
    <link href="https://harrywork.com/blog/p/2023PerformanceOptimization/"/>
    <id>https://harrywork.com/blog/p/2023PerformanceOptimization/</id>
    <published>2023-03-13T00:47:29.000Z</published>
    <updated>2024-04-07T01:02:03.655Z</updated>
    
    <content type="html"><![CDATA[<p>将第一个struct改写为第二种可以通过排序结构体struct中字段提升性能,降低内存使用率</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> BadStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    age          <span class="type">uint8</span></span><br><span class="line">    IdCardNumber <span class="type">uint64</span></span><br><span class="line">    DateOfBirth  <span class="type">uint16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GoodStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    age          <span class="type">uint8</span></span><br><span class="line">    DateOfBirth  <span class="type">uint16</span></span><br><span class="line">    IdCardNumber <span class="type">uint64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将第一个struct改写为第二种可以通过排序结构体struct中字段提升性能,降低内存使用率&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="go" scheme="https://harrywork.com/blog/tags/go/"/>
    
    <category term="struct" scheme="https://harrywork.com/blog/tags/struct/"/>
    
  </entry>
  
  <entry>
    <title>go ioutil包1.16起弃用 使用io包代替</title>
    <link href="https://harrywork.com/blog/p/2022GoioutilPackage/"/>
    <id>https://harrywork.com/blog/p/2022GoioutilPackage/</id>
    <published>2022-11-13T13:12:04.000Z</published>
    <updated>2024-04-07T01:02:03.645Z</updated>
    
    <content type="html"><![CDATA[<p>20 年 10 月份，Go 掌舵人 Russ Cox 已经有废弃 ioutil 包的提案[1]，废弃原因是:io&#x2F;ioutil, like most things with util in the name, has turned out to be a poorly defined and hard to understand collection of things.</p><p>后续的几次代码提交也证实了这一点，从 Go 1.16 开始会废弃 io&#x2F;ioutil 包，相关的功能会挪到 io 包或 os 包</p><p>相关连接 <a href="https://github.com/go-critic/go-critic/issues/1019">https://github.com/go-critic/go-critic/issues/1019</a></p><p>例如 ioutil.NopCloser方法, 改为io.NopCloser方法即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;20 年 10 月份，Go 掌舵人 Russ Cox 已经有废弃 ioutil 包的提案[1]，废弃原因是:io&amp;#x2F;ioutil, like most things with util in the name, has turned out to be a poor</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="go" scheme="https://harrywork.com/blog/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go sha256withRSA签名 base64</title>
    <link href="https://harrywork.com/blog/p/2022Gosha256/"/>
    <id>https://harrywork.com/blog/p/2022Gosha256/</id>
    <published>2022-11-10T13:12:04.000Z</published>
    <updated>2024-04-07T01:02:03.648Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**实例</span></span><br><span class="line"><span class="comment">//生成密钥文件</span></span><br><span class="line"><span class="comment">GenerateRSAKey(2048)</span></span><br><span class="line"><span class="comment">//模拟发送方</span></span><br><span class="line"><span class="comment">//要发送的消息</span></span><br><span class="line"><span class="comment">msg := []byte(&quot;hello world&quot;)</span></span><br><span class="line"><span class="comment">//生成签名</span></span><br><span class="line"><span class="comment">sign := GetSign(msg, &quot;private.pem&quot;)</span></span><br><span class="line"><span class="comment">fmt.Println(&quot;signlen lenlen&quot;, string(sign))</span></span><br><span class="line"><span class="comment">//模拟接收方</span></span><br><span class="line"><span class="comment">//接受到的消息</span></span><br><span class="line"><span class="comment">acceptmsg := []byte(&quot;hello world&quot;)</span></span><br><span class="line"><span class="comment">//接受到的签名</span></span><br><span class="line"><span class="comment">acceptsign := sign</span></span><br><span class="line"><span class="comment">//验证签名</span></span><br><span class="line"><span class="comment">result := VerifySign(acceptmsg, acceptsign, &quot;public.pem&quot;)</span></span><br><span class="line"><span class="comment">fmt.Println(&quot;验证结果：&quot;, result)</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成RSA私钥和公钥，保存到文件中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateRSAKey</span><span class="params">(bits <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//GenerateKey函数使用随机数据生成器random生成一对具有指定字位数的RSA密钥</span></span><br><span class="line"><span class="comment">//Reader是一个全局、共享的密码用强随机数生成器</span></span><br><span class="line">privateKey, err := rsa.GenerateKey(rand.Reader, bits)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//保存私钥</span></span><br><span class="line"><span class="comment">//通过x509标准将得到的ras私钥序列化为ASN.1 的 DER编码字符串</span></span><br><span class="line">X509PrivateKey := x509.MarshalPKCS1PrivateKey(privateKey)</span><br><span class="line"><span class="comment">//使用pem格式对x509输出的内容进行编码</span></span><br><span class="line"><span class="comment">//创建文件保存私钥</span></span><br><span class="line">privateFile, err := os.Create(<span class="string">&quot;private.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> privateFile.Close()</span><br><span class="line"><span class="comment">//构建一个pem.Block结构体对象</span></span><br><span class="line">privateBlock := pem.Block&#123;Type: <span class="string">&quot;RSA Private Key&quot;</span>, Bytes: X509PrivateKey&#125;</span><br><span class="line"><span class="comment">//将数据保存到文件</span></span><br><span class="line">pem.Encode(privateFile, &amp;privateBlock)</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存公钥</span></span><br><span class="line"><span class="comment">//获取公钥的数据</span></span><br><span class="line">publicKey := privateKey.PublicKey</span><br><span class="line"><span class="comment">//X509对公钥编码</span></span><br><span class="line">X509PublicKey, err := x509.MarshalPKIXPublicKey(&amp;publicKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pem格式编码</span></span><br><span class="line"><span class="comment">//创建用于保存公钥的文件</span></span><br><span class="line">publicFile, err := os.Create(<span class="string">&quot;public.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> publicFile.Close()</span><br><span class="line"><span class="comment">//创建一个pem.Block结构体对象</span></span><br><span class="line">publicBlock := pem.Block&#123;Type: <span class="string">&quot;RSA Public Key&quot;</span>, Bytes: X509PublicKey&#125;</span><br><span class="line"><span class="comment">//保存到文件</span></span><br><span class="line">pem.Encode(publicFile, &amp;publicBlock)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取RSA私钥</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetRSAPrivateKey</span><span class="params">(path <span class="type">string</span>)</span></span> *rsa.PrivateKey &#123;</span><br><span class="line"><span class="comment">//读取文件内容</span></span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">info, _ := file.Stat()</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, info.Size())</span><br><span class="line">file.Read(buf)</span><br><span class="line"><span class="comment">//pem解码</span></span><br><span class="line">block, _ := pem.Decode(buf)</span><br><span class="line"><span class="comment">//X509解码</span></span><br><span class="line">privateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)</span><br><span class="line"><span class="keyword">return</span> privateKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取RSA公钥</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetRSAPublicKey</span><span class="params">(path <span class="type">string</span>)</span></span> *rsa.PublicKey &#123;</span><br><span class="line"><span class="comment">//读取公钥内容</span></span><br><span class="line">file, err := os.Open(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">info, _ := file.Stat()</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, info.Size())</span><br><span class="line">file.Read(buf)</span><br><span class="line"><span class="comment">//pem解码</span></span><br><span class="line">block, _ := pem.Decode(buf)</span><br><span class="line"><span class="comment">//x509解码</span></span><br><span class="line">publicKeyInterface, err := x509.ParsePKIXPublicKey(block.Bytes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">publicKey := publicKeyInterface.(*rsa.PublicKey)</span><br><span class="line"><span class="keyword">return</span> publicKey</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对消息的散列值进行数字签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSign</span><span class="params">(msg []<span class="type">byte</span>, path <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//取得私钥</span></span><br><span class="line">privateKey := GetRSAPrivateKey(path)</span><br><span class="line"><span class="comment">//计算散列值</span></span><br><span class="line">hash := sha256.New()</span><br><span class="line">hash.Write(msg)</span><br><span class="line">bytes := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//SignPKCS1v15使用RSA PKCS#1 v1.5规定的RSASSA-PKCS1-V1_5-SIGN签名方案计算签名</span></span><br><span class="line">sign, err := rsa.SignPKCS1v15(rand.Reader, privateKey, crypto.SHA256, bytes)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(sign)</span><br><span class="line">&#125;</span><br><span class="line">signStr := base64.StdEncoding.EncodeToString(sign)</span><br><span class="line"><span class="keyword">return</span> signStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证数字签名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">VerifySign</span><span class="params">(msg []<span class="type">byte</span>, sign <span class="type">string</span>, path <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="comment">//取得公钥</span></span><br><span class="line">publicKey := GetRSAPublicKey(path)</span><br><span class="line"><span class="comment">//计算消息散列值</span></span><br><span class="line">hash := sha256.New()</span><br><span class="line">hash.Write(msg)</span><br><span class="line">bytes := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//验证数字签名</span></span><br><span class="line">signBaseDe, _ := base64.StdEncoding.DecodeString(sign)</span><br><span class="line">err := rsa.VerifyPKCS1v15(publicKey, crypto.SHA256, bytes, signBaseDe)</span><br><span class="line"><span class="keyword">return</span> err == <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">生成密钥文件GenerateRSAKey(2048)//模拟发送方//要发送的消息msg := []byte(&quot;hello world&quot;)//生成签名sign := GetSign(msg, &quot;private.pem&quot;)fmt.Println(&quot;signlen lenlen&quot;, string(sign))//模拟接收方//接受到的消息acceptmsg := []byte(&quot;hello world&quot;)//接受到的签名acceptsign := sign//验证签名result := VerifySign(acceptmsg, acceptsign, &quot;public.pem&quot;)fmt.Println(&quot;验证结果：&quot;, result)</summary>
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="go" scheme="https://harrywork.com/blog/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go第二次获取body获取不到问题</title>
    <link href="https://harrywork.com/blog/p/2022RetrievalinGo/"/>
    <id>https://harrywork.com/blog/p/2022RetrievalinGo/</id>
    <published>2022-11-01T13:12:04.000Z</published>
    <updated>2024-04-07T01:02:03.649Z</updated>
    
    <content type="html"><![CDATA[<p>在使用os.ReadAll(r.Body)方法后,需要执行下面方法,将body重新写回去</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">ctx.Request.Body = io.NopCloser(bytes.NewBuffer(signStrByte)) <span class="comment">// 把body再写回去,不然别的地方取不到</span></span><br></pre></td></tr></table></figure><p>经实践发现 使用gin.Context.Bindxxx相关方法 ,也需要执行上述方法重写body</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用os.ReadAll(r.Body)方法后,需要执行下面方法,将body重新写回去&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ctx</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>golang gin接口签名sign</title>
    <link href="https://harrywork.com/blog/p/2022golanginterface/"/>
    <id>https://harrywork.com/blog/p/2022golanginterface/</id>
    <published>2022-10-28T13:12:04.000Z</published>
    <updated>2024-04-07T01:02:03.647Z</updated>
    
    <content type="html"><![CDATA[<p>golang gin接口签名sign</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">gin.Default().Group(<span class="string">&quot;&quot;</span>).Use(xxx.CheckSign())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//注册需要签名的路由</span></span><br><span class="line">gin.Default().Group(<span class="string">&quot;testrouter&quot;</span>).POST(<span class="string">&quot;dotest&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">response.Result(<span class="number">401</span>, gin.H&#123;&#125;, <span class="string">&quot;hello&quot;</span>, ctx)</span><br><span class="line">&#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sign.go 签名 验签</p><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/flipped-aurora/gin-vue-admin/server/model/common/response&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">SignWrong  = <span class="string">&quot;sign wrong&quot;</span></span><br><span class="line">SignNull   = <span class="string">&quot;sign null&quot;</span></span><br><span class="line">ApiKeyNull = <span class="string">&quot;sign null&quot;</span></span><br><span class="line">UserWrong  = <span class="string">&quot;username wrong&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckSign</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">reqData := &amp;RequestHttp&#123;</span><br><span class="line">Ctx:    c,</span><br><span class="line">Params: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">apiKey := c.Request.FormValue(<span class="string">&quot;api_key&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> apiKey == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">response.Result(<span class="number">401</span>, gin.H&#123;&#125;, ApiKeyNull, c)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">apiSecret := <span class="string">&quot;&quot;</span></span><br><span class="line">signReq := c.Request.FormValue(<span class="string">&quot;sign&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> signReq == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">response.Result(<span class="number">401</span>, gin.H&#123;&#125;, SignNull, c)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">signStr := reqData.RequestParams(<span class="string">&quot;sign&quot;</span>) + apiSecret</span><br><span class="line">fmt.Println(signStr, <span class="string">&quot;signStr&quot;</span>)</span><br><span class="line">signReal := SignEncode(signStr)</span><br><span class="line"><span class="keyword">if</span> signReq != signReal &#123;</span><br><span class="line">response.Result(<span class="number">401</span>, gin.H&#123;&#125;, SignWrong, c)</span><br><span class="line">c.Abort()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.Next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@function: SignEncode</span></span><br><span class="line"><span class="comment">//@description: 生成sign</span></span><br><span class="line"><span class="comment">//@param: message string</span></span><br><span class="line"><span class="comment">//@return: sign string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SignEncode</span><span class="params">(message <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> GetSHA256HashCode(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@function: GetSHA256HashCode</span></span><br><span class="line"><span class="comment">//@description: SHA256生成哈希值</span></span><br><span class="line"><span class="comment">//@param: message string</span></span><br><span class="line"><span class="comment">//@return: hashCode string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSHA256HashCode</span><span class="params">(message <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">messageArr := []<span class="type">byte</span>(message)</span><br><span class="line"><span class="comment">//创建一个基于SHA256算法的hash.Hash接口的对象</span></span><br><span class="line">hash := sha256.New()</span><br><span class="line"><span class="comment">//输入数据</span></span><br><span class="line">hash.Write(messageArr)</span><br><span class="line"><span class="comment">//计算哈希值</span></span><br><span class="line">bytes := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line"><span class="comment">//将字符串编码为16进制格式,返回字符串</span></span><br><span class="line">hashCode := hex.EncodeToString(bytes)</span><br><span class="line"><span class="comment">//返回哈希值</span></span><br><span class="line"><span class="keyword">return</span> hashCode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get_request.go 获取请求参数,转换请求参数为string,参数key排序</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin/binding&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RequestHttp <span class="keyword">struct</span> &#123;</span><br><span class="line">Ctx    *gin.Context</span><br><span class="line">Params <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">lock   sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@function: JoinParamsStr</span></span><br><span class="line"><span class="comment">//@description: 请求参数转换字符串</span></span><br><span class="line"><span class="comment">//@param: message string</span></span><br><span class="line"><span class="comment">//@return: a=1&amp;b=2 string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RequestHttp)</span></span> JoinParamsStr() <span class="type">string</span> &#123;</span><br><span class="line"><span class="comment">//先按key 排序 升序 ASCII 升序</span></span><br><span class="line">keys := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(r.Params))</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> r.Params &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br><span class="line"><span class="keyword">var</span> params []<span class="type">string</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(r.Params) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> keys &#123;</span><br><span class="line">params = <span class="built_in">append</span>(params, fmt.Sprintf(<span class="string">&quot;%s=%v&quot;</span>, k, r.Params[k]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strings.Join(params, <span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@function: RequestParams</span></span><br><span class="line"><span class="comment">//@description: 获取参数集合</span></span><br><span class="line"><span class="comment">//@param: exclude string 排除key</span></span><br><span class="line"><span class="comment">//@return: hashCode string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RequestHttp)</span></span> RequestParams(exclude <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">ctx := r.Ctx</span><br><span class="line">bindParams := <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> ctx.Request.Method == <span class="string">&quot;POST&quot;</span> &#123;</span><br><span class="line">contextType := ctx.Request.Header.Get(<span class="string">&quot;Content-Type&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> contextType == <span class="string">&quot;application/json&quot;</span> &#123;</span><br><span class="line">err := ctx.ShouldBindBodyWith(&amp;bindParams, binding.JSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123; <span class="comment">//报错</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;nyx_request_mid_error %v,err: %v \n&quot;</span>, bindParams, err)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(bindParams) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> bindParams &#123;</span><br><span class="line">r.Add(k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">_ = ctx.Request.ParseMultipartForm(<span class="number">32</span> &lt;&lt; <span class="number">20</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ctx.Request.PostForm) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> ctx.Request.PostForm &#123;</span><br><span class="line">r.Add(k, v[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> tmpParams = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">err2 := ctx.ShouldBind(&amp;tmpParams)</span><br><span class="line"><span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;nyx_request_mid_error %v,err: %v \n&quot;</span>, bindParams, err2)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> tmpParams &#123;</span><br><span class="line">r.Add(k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">r.Delete(exclude)</span><br><span class="line"><span class="keyword">return</span> r.JoinParamsStr()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RequestHttp)</span></span> Add(key <span class="type">string</span>, value <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">r.lock.Lock()</span><br><span class="line">r.Params[key] = value</span><br><span class="line">r.lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RequestHttp)</span></span> Delete(key <span class="type">string</span>) &#123;</span><br><span class="line">r.lock.Lock()</span><br><span class="line"><span class="keyword">if</span> _, ok := r.Params[key]; ok &#123;</span><br><span class="line"><span class="built_in">delete</span>(r.Params, key)</span><br><span class="line">&#125;</span><br><span class="line">r.lock.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;golang gin接口签名sign&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gin.Default().Group(&lt;span class=&quot;</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="后端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%90%8E%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>如何在手机上清除公众号页面授权? 在微信上清除公众号个人信息授权</title>
    <link href="https://harrywork.com/blog/p/2022HowtoClearWeChat/"/>
    <id>https://harrywork.com/blog/p/2022HowtoClearWeChat/</id>
    <published>2022-09-28T13:12:04.000Z</published>
    <updated>2024-04-07T01:02:03.658Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-首先取关公众号"><a href="#1-首先取关公众号" class="headerlink" title="1.首先取关公众号"></a>1.首先取关公众号</h4><h4 id="2-然后重新搜索公众号名称-找到公众号后点击进入公众号页面"><a href="#2-然后重新搜索公众号名称-找到公众号后点击进入公众号页面" class="headerlink" title="2.然后重新搜索公众号名称,找到公众号后点击进入公众号页面"></a>2.然后重新搜索公众号名称,找到公众号后点击进入公众号页面</h4><h4 id="3-点击右上角三个点-在弹出的菜单中选择”设置”"><a href="#3-点击右上角三个点-在弹出的菜单中选择”设置”" class="headerlink" title="3.点击右上角三个点,在弹出的菜单中选择”设置”"></a>3.点击右上角三个点,在弹出的菜单中选择”设置”</h4><h4 id="4-点击”已获取的信息”"><a href="#4-点击”已获取的信息”" class="headerlink" title="4.点击”已获取的信息”"></a>4.点击”已获取的信息”</h4><h4 id="5-点击管理按钮-删除已授权的信息列-并点击完成"><a href="#5-点击管理按钮-删除已授权的信息列-并点击完成" class="headerlink" title="5.点击管理按钮, 删除已授权的信息列,并点击完成"></a>5.点击管理按钮, 删除已授权的信息列,并点击完成</h4><h4 id="6-再进入到公众号页面-发现需要重新获取授权了"><a href="#6-再进入到公众号页面-发现需要重新获取授权了" class="headerlink" title="6.再进入到公众号页面,发现需要重新获取授权了"></a>6.再进入到公众号页面,发现需要重新获取授权了</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-首先取关公众号&quot;&gt;&lt;a href=&quot;#1-首先取关公众号&quot; class=&quot;headerlink&quot; title=&quot;1.首先取关公众号&quot;&gt;&lt;/a&gt;1.首先取关公众号&lt;/h4&gt;&lt;h4 id=&quot;2-然后重新搜索公众号名称-找到公众号后点击进入公众号页面&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="开发" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="https://harrywork.com/blog/categories/%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
